<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on Atmet</title>
    <link>https://oopsdc.github.io/tags/ctf/</link>
    <description>Recent content in CTF on Atmet</description>
    <image>
      <url>https://oopsdc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://oopsdc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 13 Apr 2020 22:06:50 +0800</lastBuildDate><atom:link href="https://oopsdc.github.io/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bugku</title>
      <link>https://oopsdc.github.io/post/bugku/</link>
      <pubDate>Mon, 13 Apr 2020 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.github.io/post/bugku/</guid>
      <description>Bugku Web Web1 Des:flag{}。
查看源码即可。
Web2 Des:输入验证码即可得到flag。
输入框有输入长度限制，在控制台修改长度即可。
Web3 Des:flag{}。
通过get传参，按照题目要求直接传入
?what=flagWeb4 Des:post。
方法1 利用hackbar直接post传参。
方法2 利用burp抓包传值。
方法3 编写python脚本。
 题目更新
 Des:看看源代码吧。
查看源代码，发现有两串加密字符串。
分别对两个字符串进行URL解码：
按照代码含义将其组合起来：
放到控制台Console里排版：
将if判断里a的值输入提交框，提交。
获得flag。
Web5 Des:矛盾。
利用1a绕过，例：
?num=1a01Web6 Des:flag{}。
查看源码。
Unicode编码，解码即可。
Web7 Des:你必须让它停下。
burp抓包，不断点击go发送页面，注意查看response。
Web8 Des:文件包含。
打开题目获得代码：
按照题目描述，尝试访问flag.txt，
文件内容为flags，获得flag的条件是ac和fn严格相等，fn从flag.txt进行赋值，通过GET传参?ac=flags&amp;amp;fn=flag.txt。
获得flag。
 题目更新
 ?hello=file(&amp;#39;flag.php&amp;#39;) Web9 Des:N/A。
eval(&amp;#34;var_dump($$args);&amp;#34;) //调用两次，$($argc) 调用全局变量打印所有内容，尝试GLOBAL和GLOBALS。
Simple_SSTI_1 Des:N/A。
页面显示：
You need pass in a parameter named flag。查看源码：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Simple SSTI&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; You need pass in a parameter named flag。 &amp;lt;!</description>
    </item>
    
    <item>
      <title>攻防世界</title>
      <link>https://oopsdc.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</link>
      <pubDate>Fri, 03 Jan 2020 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.github.io/post/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</guid>
      <description>攻防世界 Web view source Des:X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。
查看页面源码。
获得flag。
robots Des:X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。
在URL后加上robots.txt，得到一个php页面提示，访问对应php文件。
获得flag。
backup Des:X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！
尝试backup.php，无效。
使用御剑扫描后台，得到index.php.bak，输入后下载备份文件，cat查看。
获得flag。
cookie Des:X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：‘这是夹心饼干的意思吗？
使用burp抓包，得到cookie.php。
继续使用burp抓包，查看Response。
获得flag。
disable_button Des:N/A。
页面的flag按钮无响应，猜测被禁用，查看控制台元素。
&amp;lt;input class=&amp;quot;btn btn-default&amp;quot; disabled&amp;gt;
将此处的disabled前三字符删除，按下按钮。
获得flag。
weak_auth Des:小宁写了一个登陆验证页面，随手就设了一个密码。
查看源码。
&amp;lt;from class=&amp;quot;form-inline&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;./check.php&amp;quot;&amp;gt;
有一个验证页面，访问它。
页面空白，查看源码，提示。
&amp;lt;!--maybe you need a dictionary--&amp;gt;
这道题或许不需要字典？
尝试御剑扫描，无果。
好的我错了，随机输入用户名和密码，使用burp抓包，response显示用户名必须为admin，初次爆破无果，手动尝试123456，正确&amp;hellip;.如果尝试继续用字典的话还是可以爆出来，只是比较费时间。
获得flag。
simple_php Des:小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。
包含文件config.php，查看源码，无隐藏信息。
页面通过GET传参，根据条件a=0且a为真，b不能为数字且大于1234，添加?a=0e1&amp;amp;b=12346s，获得flag
get_post Des:X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？
跟着提示走，URL后添加?a=1。
hackbar进行POST传参。
获得flag。
xff_referer Des:X老师告诉小宁其实xff和referer是可以伪造的。
X-Forwarded-For：123.123.123.123
burp抓包，在Request添加Referer:https://www.google.com，查看Response。
获得flag。
webshell Des:小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。
御剑扫描后台，没用&amp;hellip;
查了一下资料，需要其他工具，选择中国蚁剑。
配好之后添加题目网址，输入密码：shell。
点击进入，查看flag.txt。
获得flag。
comman_execution Des:小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</description>
    </item>
    
  </channel>
</rss>
