<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily on Atmet</title>
    <link>https://oopsdc.tk/tags/daily/</link>
    <description>Recent content in Daily on Atmet</description>
    <image>
      <url>https://oopsdc.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://oopsdc.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Jul 2021 14:34:21 +0800</lastBuildDate><atom:link href="https://oopsdc.tk/tags/daily/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ATT&amp;CK实战一</title>
      <link>https://oopsdc.tk/post/attck%E5%AE%9E%E6%88%98%E4%B8%80/</link>
      <pubDate>Wed, 21 Jul 2021 14:34:21 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/attck%E5%AE%9E%E6%88%98%E4%B8%80/</guid>
      <description>一、环境搭建 1.1 下载虚拟机文件 自行搜索。
1.2 环境介绍 本次实验共3台主机，Win7作为Web服务器，是最先攻击点，Win2k3为内网域成员主机，Win2k8 R2为内网域控主机。
Kali:自主搭建，配置与Web服务器同一网段的IP，使用命令ifconfig eth0 &amp;lt;ip&amp;gt;即可。
Win7:双网卡，即存在内外网IP。外网网卡通过DHCP自动获取IP，内网网卡配置静态IP:192.168.52.143。服务器存在yxcms。分别与Kali(NAT模式)和内网两台主机(自定义VMnet2)连通。
Win2k3:只有内网网卡，IP:192.168.52.138，使用VMnet2。
Win2k8 R2:只有内网网卡，IP:192.168.52.141，使用VMnet2。
拓扑图如下:
![Untitled Diagram](https://gitee.com/oopsdc/PicBed/raw/master/img/Untitled Diagram.png)
安装完成之后在Win7主机上打开phpstudy开启Web服务。
二、信息收集 2.1 探测存活主机 命令:
nmap -sS -sV -O 192.168.106.0/24# 此处的IP为NAT模式下Win7和Kali自动获取到的IP# 参数说明sS	:	SYN半连接扫描，只进行前两次握手sV	:	显示服务器详细版本O	:	显示服务器操作系统(不太准确)结果:
Nmap scan report for 192.168.106.150Host is up (0.00044s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.</description>
    </item>
    
    <item>
      <title>APNs推送机制</title>
      <link>https://oopsdc.tk/post/%E6%B5%85%E6%9E%90ios-apns%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 20 Jul 2021 17:19:55 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E6%B5%85%E6%9E%90ios-apns%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/</guid>
      <description>APNs简述 Apple Push Notification server(APNs)，即苹果推送通知服务。
APNs出现需求 由于移动设备内存、CPU、电池容量等各种因素，iOS不允许APP进程常驻后台(时限大概为10min)。
当用户主动关闭APP或后台APP进入后台达到限定时长后，意味着该APP进程的结束，在一定程度上保证了手机的流畅度与使用时长。但这也同时意味着服务器无法主动和用户交互(如实时推送消息)，为了解决这个限制，苹果推出了APNs，允许设备和服务器分别与苹果的推送服务器保持长连接状态。
iOS通知 iOS通知分为本地通知和远程通知两类，APNs是远程通知功能的核心。
本地通知 由本地应用触发，一般是基于时间的通知形式，如闹钟、日历、待办事项等。
远程通知 通过自建服务器推送消息的通知形式。
APNs推送流程 苹果官方APNs概述:Local and Remote Notification Programming Guide: APNs Overview (apple.com)
以下为APNs推送流程图:
 Provider:自建应用服务器 APNs:苹果APNs推送通知服务器 Device:苹果设备 Client App:应用  大致流程可分为以下4点:
 苹果设备安装应用后会向APNs服务器进行注册，注册成功后APNs服务器返回一个deviceToken，且二者之间会维持一个基于SSL协议的TCP流通讯的长连接。 拿到deviceToken后设备会将其发送至自建应用服务器 有消息需要被推送时，自建服务器会将消息按指定格式结合deviceToken一并打包发送给APNs。 APNs将新消息推送至设备，并在设备屏幕上显示出来(因为设备和服务器之间维持了一个长连接)  结合上述过程可以发现，真正完成推送的是APNs服务器，消息一定是由APNs服务器推送给我们的设备，自建应用服务器只是将需要推送的消息告诉APNs服务器。至于如何维护消息队列或如何保证消息能被推送到指定设备上，这些功能都是由APNs实现的。
deviceToken deviceToken是一个APP安装在设备上的唯一标识符，一个APP在不同设备上的deviceToken不同，同一台设备重新安装同一个APP后deviceToken也会不同。
项目代码AppDelegate中有一个回调方法，当APNs注册成功后通过该回调方法可以获取到返回的deviceToken。
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken APNs拿到这个包之后会验证包结构是否正确，验证无误后会提取其中的消息，再将消息推送至指定设备。
消息体结构如下:
{ &amp;#34;aps&amp;#34;:{ &amp;#34;alert&amp;#34;:{	// 显示在用户设备上的推送标题内容 &amp;#34;title&amp;#34;:&amp;#34;Test Request&amp;#34;, &amp;#34;body&amp;#34;:&amp;#34;This is a test msg.&amp;#34;, }, &amp;#34;badge&amp;#34;:5,	// 显示的数量(整形类型)，是在应用icon右上角显示的数量，提示有几条未读信息 &amp;#34;sound&amp;#34;:&amp;#34;default&amp;#34;	// 推送消息声 } } 其实这就是一个JSON结构体，上述代码只是一种简单消息体，详情可见苹果官方文档:Local and Remote Notification Programming Guide: Creating the Remote Notification Payload (apple.</description>
    </item>
    
    <item>
      <title>Arm开发板联网配置</title>
      <link>https://oopsdc.tk/post/arm%E5%BC%80%E5%8F%91%E6%9D%BF%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 20 Jul 2021 12:17:34 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/arm%E5%BC%80%E5%8F%91%E6%9D%BF%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</guid>
      <description>文章背景 使用S5P6818开发板时，有业务上云的需求，遂有本文，内容较少，仅涉及联网部分。
问题描述  插上网线后无法获取IP 配置静态IP后无法ping通外网  解决方案 分两步解决。
1.配置静态IP 方法一
命令行配置:
ifconfig eth0 &amp;lt;ip&amp;gt; netmask &amp;lt;netmask&amp;gt; 方法二
写配置文件:
vi /etc/init.d/rcS # 网卡开机自启 ifconfig eth0 up ifconfig eth0 &amp;lt;ip&amp;gt; netmask &amp;lt;netmask&amp;gt; 2.配置网关及DNS服务器 完成第一步后，可以ping通局域网下的主机，但无法ping通外网，出现如下报错:
sendto: Network is unreachable使用route命令查看路由表:
Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface10.7.150.0 * 255.255.255.0 U 0 0 0 eth0发现没有网关，配置网关:
route add default gw 10.7.150.1再使用route命令验证一下，确认配好。
之后便要配置DNS解析，在/etc目录下新建一个resolv.conf配置文件，内容如下:
#114 DNS服务器nameserver 114.114.114.114 #微软 DNS服务器nameserver 233.</description>
    </item>
    
    <item>
      <title>utterances博客评论插件</title>
      <link>https://oopsdc.tk/post/utterances%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 20 Jul 2021 09:10:00 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/utterances%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
      <description>概述 utterances是一个基于GitHub issue，拥有多种主题的开源小组件，本文将简述使用如何在hugo博客部署utterances。
配置过程 新建仓库 新建一个公开的仓库，用于存放评论，名字随意。作者在此处创建一个名为utterances的公开仓库。
安装utterances GitHub Apps - utterances
点击安装即可，选择仓库:
安装完成后会自动跳转到官方页面。
在文件中添加插件 官方文档:utterances
修改footer.html文件，以PaperMod主题为例:
&amp;lt;footer class=&amp;#34;footer&amp;#34;&amp;gt; {{- if .Site.Copyright }} &amp;lt;span&amp;gt;{{ .Site.Copyright | markdownify }}&amp;lt;/span&amp;gt; {{- else }} &amp;lt;span&amp;gt;&amp;amp;copy; {{ now.Year }} &amp;lt;a href=&amp;#34;{{ &amp;#34;&amp;#34; | absLangURL }}&amp;#34;&amp;gt;{{ .Site.Title }}&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; {{- end }} &amp;lt;span&amp;gt;&amp;amp;middot;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Powered by &amp;lt;a href=&amp;#34;https://gohugo.io/&amp;#34; rel=&amp;#34;noopener noreferrer&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;Hugo&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;amp;middot;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Theme &amp;lt;a href=&amp;#34;https://git.io/hugopapermod&amp;#34; rel=&amp;#34;noopener&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;PaperMod&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;oopsdc/utterances&amp;#34; issue-term=&amp;#34;title&amp;#34; theme=&amp;#34;github-light&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/footer&amp;gt; 运行命令hugo server进入一篇文章即可查看评论插件效果。</description>
    </item>
    
    <item>
      <title>ProxyChains</title>
      <link>https://oopsdc.tk/post/proxychains/</link>
      <pubDate>Fri, 09 Jul 2021 22:24:59 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/proxychains/</guid>
      <description>概述 ProxyChains是一个Linux和Unix下的代理工具，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4、SOCKS5类型的代理服务器，且可配置多个代理。
ProxyChains通过用户自定义的代理列表强制连接指定的应用程序。
本文简述kali下如何通过ProxyChains使用Windows主机代理。
相关资料 GitHub项目地址 ProxyChains:haad/proxychains: proxychains - a tool that forces any TCP connection made by any given application to follow through proxy like TOR or any other SOCKS4, SOCKS5 or HTTP(S) proxy. Supported auth-types: &amp;ldquo;user/pass&amp;rdquo; for SOCKS4/5, &amp;ldquo;basic&amp;rdquo; for HTTP. (github.com)
ProxyChains-ng:rofl0r/proxychains-ng: proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. continuation of the unmaintained proxychains project.</description>
    </item>
    
    <item>
      <title>自定义GitHub个人资料</title>
      <link>https://oopsdc.tk/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 01 Jul 2021 21:33:33 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</guid>
      <description>概述 想自定义一下GitHub的个人资料自述文件，遂有本文。
官方文档:管理个人资料自述文件 - GitHub Docs
关于自述文件:关于自述文件 - GitHub Docs
基本要求  创建一个与用户名相同的公开仓库 仓库根目录包含README.md文件 README.md文件不能为空  实现步骤 1.添加个人资料自述文件 1.新建仓库 在任意页面点击右上角的+号创建一个与自己用户名相同的仓库。当输入自己的用户名时，会出现一个小彩蛋。
2.添加仓库说明(可选) 3.设置仓库为公共属性 4.使用自述文件初始化仓库 5.创建仓库并编辑README文档 生成的自述文件已由模板预先填充，也可自定义表情、符号。
表情符号清单:🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more (webfx.com)
在想要换行的文本前后加上&amp;lt;br&amp;gt;和&amp;lt;/br&amp;gt;即可，如:
&amp;lt;br&amp;gt;This is test&amp;lt;/br&amp;gt; 2.删除个人资料自述文件 以下任一满足，个人资料自述文件就将会被删除:
 自述文件为空或不存在 仓库为私有仓库 仓库名与用户名不匹配   本文链接:自定义GitHub个人资料 | Atmet (oopsdc.tk)
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>博客搭建</title>
      <link>https://oopsdc.tk/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 12 Jun 2021 12:29:53 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>博客搭建 hugo Hugo官方网站:https://gohugo.io
本文以PaperMod主题为例，官方文档:Installation · adityatelange/hugo-PaperMod Wiki (github.com)
需求准备 Hugo:Releases · gohugoio/hugo (github.com)
安装步骤 1.解压压缩包 2.配置环境变量 D:\Env\hugo_0.83.13.初始化博客 官方文档推荐我们使用易读性更高的yml格式初始化博客。
hugo new site &amp;lt;name of site&amp;gt; -f yml4.指定主题 在config.yml文件中设置主题。
theme: PaperMod5.本地启动 先在本地看看网站跑起来的效果
hugo server6.创建GitHub仓库 具体操作详见之后的hexo主题教学。
7.修改baseUrl 将config.yml文件中的baseUrl修改为刚刚创建的仓库。
baseURL: &amp;quot;https://&amp;lt;username&amp;gt;.github.io/&amp;quot;8.生成public文件夹 public中包含所有静态页面的内容，我们需要生成这个文件夹并上传到远程仓库中，完成博客部署。
hugo9.push到远程仓库 # 配置代理 git config --global http.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; git config --global https.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; # 更改默认分支 git push -u origin main # push文件 cd public git init git add .</description>
    </item>
    
    <item>
      <title>XSS Challenges</title>
      <link>https://oopsdc.tk/post/xss-challenges/</link>
      <pubDate>Thu, 10 Jun 2021 21:03:39 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/xss-challenges/</guid>
      <description>题目地址:https://xss-quiz.int21h.jp/
Stage #1  Hint: Very simple&amp;hellip;
 直接输入测试语句:
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #2  Hint: Close the current tag and add SCRIPT tag&amp;hellip;
 地址:XSS Challenges (by yamagata21) - Stage #2 (int21h.jp)
上测试语句:
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; 然后审查元素，只需要把input标签闭合就能执行我们的语句了。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #3  Hint: The input in text box is properly escaped.
 地址:XSS Challenges (by yamagata21) - Stage #3 (int21h.jp)
这个页面有两个input标签，先在搜索框输入我们的测试语句试试。
直接把我们的语句放到&amp;lt;b&amp;gt;标签里了，但是这旁边不是还有一个input标签吗。把两者的name互换一下即可。
Stage #4  Hint: Invisible input field.
 地址:XSS Challenges (by yamagata21) - Stage #4 (int21h.</description>
    </item>
    
    <item>
      <title>网站镜像克隆</title>
      <link>https://oopsdc.tk/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</link>
      <pubDate>Tue, 20 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</guid>
      <description>使用wget克隆网站 使用方法 我们可以使用man wget命令查看帮助文档。
操作命令及参数解释如下：
wget -m -p -E -k -K -np -v https://www.baidu.com/ # 参数解释 -m	:	镜像，选择该选项适用于Web站点 -p	:	页面获取的先决条件，该选项确保包含了请求的图片和css脚本文件被下载(可以更好复制html5站点) -E	:	适用于拓展，可以在本地另存一个html文件 -k	:	转换链接，确保文件本转换，适用于本地浏览 -K	:	转换备份文件，将以orig为后缀作为原始文件 -np	:	不要到上一层子目录中 -v	:	显示过程，不显示过程为-nv 克隆结果 # 克隆后在当前目录下会出现一个与网站同名的子目录，树形结构如下 www.baidu.com ├── index.html ├── index.html.orig └── robots.txt 0 directories, 3 files 使用HTTrack克隆网站 使用方法 httrack # 进入软件后需要输入项目名 baidu # 克隆后的存放地址 /home/oopsdc/Desktop # 要克隆的网站地址 www.baidu.com # 有6个选项，此处我们选2，具有向导递归层级的镜像网站 2 # 接下来的部分全选默认选项 默认回车 克隆结果 baidu ├── backblue.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://oopsdc.tk/post/docker/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/docker/</guid>
      <description>Docker概述 镜像(image)：
一个只读模板。一个镜像可以用来创建多个Docker容器，好似Java中的类和对象，镜像是类，容器是对象。容器(container)：
Docker利用容器独立运行一个或一组应用，容器是用镜像创建的运行实例。容器可以被启动、开始、停止、删除。每个容器都是相互个隔离的。也可以把容器看做一个简易版Linux环境(包括root用户权限、进程空间、用户空间和网络空间等)及运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器最上面一层可读可写。仓库(repository)：
仓库是集中存放镜像文件的场所。仓库和仓库注册服务器(registry)是有区别的，后者往往存在多个仓库，每个仓库又存在多个镜像，每个镜像有不同的标签。仓库分为公开仓库和私有仓库两种形式。最大的公开仓库是Docker Hub，国内最大的为阿里云、网易云等。Docker安装  环境:CentOS 7
 1.官方文档
2.yum安装gcc相关环境
yum -y install gcc yum -y install gcc-c++ 3.卸载旧版本
yum remove docker \ 	docker-client \ 	docker-client-latest \ 	docker-common \ 	docker-latest \ 	docker-latest-logrotate \ 	docker-logrotate \ 	docker-engine 4.安装依赖包
yum install -y yum-utils 5.设置镜像仓库
# 错误 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ## 报错 [Errno 14] curl#35 - TCP connection reset by peer [Errno 12] curl#35 - Timeout # 推荐国内镜像 yum-config-manager --add-repo http://mirrors.</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://oopsdc.tk/post/golang/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/golang/</guid>
      <description>runoob教程:Go 语言教程 | 菜鸟教程 (runoob.com)
环境搭建 安装包官方下载地址:Downloads - The Go Programming Language (golang.org)
国内能打开的地址:Downloads - The Go Programming Language (google.cn)
Windows安装go 安装包下载 这里我选择下载msi文件的go1.16.2.windows-amd64.zip压缩包，然后放在环境目录D:\Env\go1.16.2\bin下解压。
环境配置 将go目录下的/bin路径添加到Path环境变量中，点击新建。
检测安装 打开cmd输入go。
hello-world 在工作目录创建hello.go文件。
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) } 使用go run命令运行:
go run hello.go go build生成二进制文件运行:
&amp;gt; go build .\hello.go &amp;gt; ls Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2021/3/15 10:50 2094592 hello.exe -a---- 2021/3/15 10:47 79 hello.go &amp;gt; .</description>
    </item>
    
    <item>
      <title>GTK&#43;</title>
      <link>https://oopsdc.tk/post/gtk&#43;/</link>
      <pubDate>Sat, 27 Mar 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/gtk&#43;/</guid>
      <description>GTK+简介 GTK+(Gnome Toolkit+)最初是为GIMP(GNU Image Manipulation Program)写的，在开发早期GIMP版本时，Peter Mattis 和 Spencer Kimball创建了GTK(GIMP Toolkit)作为Motif收费工具包的替代。当GTK获得了面向对象特性和可扩展性后，才变为了GTK+。
GTK+特点 稳定、跨平台、多语言绑定、接口丰富、与时俱进、算法丰富、移动嵌入式应用广泛.
学习手册  GTK+2手册:GTK+ 2 Reference Manual - GNOME Developer Center GTK+3手册:GTK+ 3 Reference Manual - GNOME Developer Center 中文手册:介绍 - 《GTK+3 参考手册》 - 书栈网 · BookStack  GTK程序简介  使用gcc编译时加上pkg-config --cflags --libs gtk+-2.0，或者直接使用makefile编译
 例: gcc demo.c -o demo `pkg-config --cflags --libs gtk+-2.0` 自动获得预处理参数，如宏定义、头文件位置 自动获得链接参数，如库、依赖库位置、文件名及其它参数 GTK程序基本框架 #include &amp;lt;gtk/gtk.h&amp;gt; int main(int argc, char *argv[]) { gtk_init(&amp;amp;argc, &amp;amp;argv);	// 初始化  // 代码区  gtk_main();	// 主事件循环  return 0; } 分析:</description>
    </item>
    
  </channel>
</rss>
