<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily on Atmet</title>
    <link>https://oopsdc.tk/tags/daily/</link>
    <description>Recent content in Daily on Atmet</description>
    <image>
      <url>https://oopsdc.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://oopsdc.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Jul 2021 22:24:59 +0800</lastBuildDate><atom:link href="https://oopsdc.tk/tags/daily/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ProxyChains</title>
      <link>https://oopsdc.tk/post/proxychains/</link>
      <pubDate>Fri, 09 Jul 2021 22:24:59 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/proxychains/</guid>
      <description>概述 ProxyChains是一个Linux和Unix下的代理工具，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4、SOCKS5类型的代理服务器，且可配置多个代理。
ProxyChains通过用户自定义的代理列表强制连接指定的应用程序。
本文简述kali下如何通过ProxyChains使用Windows主机代理。
相关资料 GitHub项目地址 ProxyChains:haad/proxychains: proxychains - a tool that forces any TCP connection made by any given application to follow through proxy like TOR or any other SOCKS4, SOCKS5 or HTTP(S) proxy. Supported auth-types: &amp;ldquo;user/pass&amp;rdquo; for SOCKS4/5, &amp;ldquo;basic&amp;rdquo; for HTTP. (github.com)
ProxyChains-ng:rofl0r/proxychains-ng: proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. continuation of the unmaintained proxychains project.</description>
    </item>
    
    <item>
      <title>自定义GitHub个人资料</title>
      <link>https://oopsdc.tk/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 01 Jul 2021 21:33:33 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</guid>
      <description>概述 想自定义一下GitHub的个人资料自述文件，遂有本文。
官方文档:管理个人资料自述文件 - GitHub Docs
关于自述文件:关于自述文件 - GitHub Docs
基本要求  创建一个与用户名相同的公开仓库 仓库根目录包含README.md文件 README.md文件不能为空  实现步骤 1.添加个人资料自述文件 1.新建仓库 在任意页面点击右上角的+号创建一个与自己用户名相同的仓库。当输入自己的用户名时，会出现一个小彩蛋。
2.添加仓库说明(可选) 3.设置仓库为公共属性 4.使用自述文件初始化仓库 5.创建仓库并编辑README文档 生成的自述文件已由模板预先填充，也可自定义表情、符号。
表情符号清单:🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more (webfx.com)
在想要换行的文本前后加上&amp;lt;br&amp;gt;和&amp;lt;/br&amp;gt;即可，如:
&amp;lt;br&amp;gt;This is test&amp;lt;/br&amp;gt; 2.删除个人资料自述文件 以下任一满足，个人资料自述文件就将会被删除:
 自述文件为空或不存在 仓库为私有仓库 仓库名与用户名不匹配   本文链接:自定义GitHub个人资料 | Atmet (oopsdc.tk)
文章许可:本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。
 </description>
    </item>
    
    <item>
      <title>博客搭建</title>
      <link>https://oopsdc.tk/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 12 Jun 2021 12:29:53 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>博客搭建 hugo Hugo官方网站:https://gohugo.io
本文以PaperMod主题为例，官方文档:Installation · adityatelange/hugo-PaperMod Wiki (github.com)
需求准备 Hugo:Releases · gohugoio/hugo (github.com)
安装步骤 1.解压压缩包 2.配置环境变量 D:\Env\hugo_0.83.13.初始化博客 官方文档推荐我们使用易读性更高的yml格式初始化博客。
hugo new site &amp;lt;name of site&amp;gt; -f yml4.指定主题 在config.yml文件中设置主题。
theme: PaperMod5.本地启动 先在本地看看网站跑起来的效果
hugo server6.创建GitHub仓库 具体操作详见之后的hexo主题教学。
7.修改baseUrl 将config.yml文件中的baseUrl修改为刚刚创建的仓库。
baseURL: &amp;quot;https://&amp;lt;username&amp;gt;.github.io/&amp;quot;8.生成public文件夹 public中包含所有静态页面的内容，我们需要生成这个文件夹并上传到远程仓库中，完成博客部署。
hugo9.push到远程仓库 # 配置代理 git config --global http.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; git config --global https.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; # 更改默认分支 git push -u origin main # push文件 cd public git init git add .</description>
    </item>
    
    <item>
      <title>XSS Challenges</title>
      <link>https://oopsdc.tk/post/xss-challenges/</link>
      <pubDate>Thu, 10 Jun 2021 21:03:39 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/xss-challenges/</guid>
      <description>题目地址:https://xss-quiz.int21h.jp/
Stage #1  Hint: Very simple&amp;hellip;
 直接输入测试语句:
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #2  Hint: Close the current tag and add SCRIPT tag&amp;hellip;
 上测试语句:
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; 然后审查元素，只需要把input标签闭合就能执行我们的语句了。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #3  Hint: The input in text box is properly escaped.
 这个页面有两个input标签，先在搜索框输入我们的测试语句试试。
直接把我们的语句放到&amp;lt;b&amp;gt;标签里了，但是这旁边不是还有一个input标签吗。把两者的name互换一下即可。
Stage #4  Hint: Invisible input field.
 审查元素发现有三个input标签，第三个标签的属性是hidden，把它改为text，然后把input标签闭合。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #5  Hint: Length limited text box.
 审查元素，发现搜索框的长度被限制，修改maxlength的值即可。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #6  Hint: Event handler attributes.</description>
    </item>
    
    <item>
      <title>网站镜像克隆</title>
      <link>https://oopsdc.tk/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</link>
      <pubDate>Tue, 20 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</guid>
      <description>使用wget克隆网站 使用方法 我们可以使用man wget命令查看帮助文档。
操作命令及参数解释如下：
wget -m -p -E -k -K -np -v https://www.baidu.com/ # 参数解释 -m	:	镜像，选择该选项适用于Web站点 -p	:	页面获取的先决条件，该选项确保包含了请求的图片和css脚本文件被下载(可以更好复制html5站点) -E	:	适用于拓展，可以在本地另存一个html文件 -k	:	转换链接，确保文件本转换，适用于本地浏览 -K	:	转换备份文件，将以orig为后缀作为原始文件 -np	:	不要到上一层子目录中 -v	:	显示过程，不显示过程为-nv 克隆结果 # 克隆后在当前目录下会出现一个与网站同名的子目录，树形结构如下 www.baidu.com ├── index.html ├── index.html.orig └── robots.txt 0 directories, 3 files 使用HTTrack克隆网站 使用方法 httrack # 进入软件后需要输入项目名 baidu # 克隆后的存放地址 /home/oopsdc/Desktop # 要克隆的网站地址 www.baidu.com # 有6个选项，此处我们选2，具有向导递归层级的镜像网站 2 # 接下来的部分全选默认选项 默认回车 克隆结果 baidu ├── backblue.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://oopsdc.tk/post/docker/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/docker/</guid>
      <description>Docker概述 镜像(image)：
一个只读模板。一个镜像可以用来创建多个Docker容器，好似Java中的类和对象，镜像是类，容器是对象。容器(container)：
Docker利用容器独立运行一个或一组应用，容器是用镜像创建的运行实例。容器可以被启动、开始、停止、删除。每个容器都是相互个隔离的。也可以把容器看做一个简易版Linux环境(包括root用户权限、进程空间、用户空间和网络空间等)及运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器最上面一层可读可写。仓库(repository)：
仓库是集中存放镜像文件的场所。仓库和仓库注册服务器(registry)是有区别的，后者往往存在多个仓库，每个仓库又存在多个镜像，每个镜像有不同的标签。仓库分为公开仓库和私有仓库两种形式。最大的公开仓库是Docker Hub，国内最大的为阿里云、网易云等。Docker安装  环境:CentOS 7
 1.官方文档
2.yum安装gcc相关环境
yum -y install gcc yum -y install gcc-c++ 3.卸载旧版本
yum remove docker \ 	docker-client \ 	docker-client-latest \ 	docker-common \ 	docker-latest \ 	docker-latest-logrotate \ 	docker-logrotate \ 	docker-engine 4.安装依赖包
yum install -y yum-utils 5.设置镜像仓库
# 错误 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ## 报错 [Errno 14] curl#35 - TCP connection reset by peer [Errno 12] curl#35 - Timeout # 推荐国内镜像 yum-config-manager --add-repo http://mirrors.</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://oopsdc.tk/post/golang/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/golang/</guid>
      <description>runoob教程:Go 语言教程 | 菜鸟教程 (runoob.com)
环境搭建 安装包官方下载地址:Downloads - The Go Programming Language (golang.org)
国内能打开的地址:Downloads - The Go Programming Language (google.cn)
Windows安装go 安装包下载 这里我选择下载msi文件的go1.16.2.windows-amd64.zip压缩包，然后放在环境目录D:\Env\go1.16.2\bin下解压。
环境配置 将go目录下的/bin路径添加到Path环境变量中，点击新建。
检测安装 打开cmd输入go。
hello-world 在工作目录创建hello.go文件。
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) } 使用go run命令运行:
go run hello.go go build生成二进制文件运行:
&amp;gt; go build .\hello.go &amp;gt; ls Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2021/3/15 10:50 2094592 hello.exe -a---- 2021/3/15 10:47 79 hello.go &amp;gt; .</description>
    </item>
    
    <item>
      <title>GTK&#43;</title>
      <link>https://oopsdc.tk/post/gtk&#43;/</link>
      <pubDate>Sat, 27 Mar 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/gtk&#43;/</guid>
      <description>GTK+简介 GTK+(Gnome Toolkit+)最初是为GIMP(GNU Image Manipulation Program)写的，在开发早期GIMP版本时，Peter Mattis 和 Spencer Kimball创建了GTK(GIMP Toolkit)作为Motif收费工具包的替代。当GTK获得了面向对象特性和可扩展性后，才变为了GTK+。
GTK+特点 稳定、跨平台、多语言绑定、接口丰富、与时俱进、算法丰富、移动嵌入式应用广泛.
学习手册  GTK+2手册:GTK+ 2 Reference Manual - GNOME Developer Center GTK+3手册:GTK+ 3 Reference Manual - GNOME Developer Center 中文手册:介绍 - 《GTK+3 参考手册》 - 书栈网 · BookStack  GTK程序简介  使用gcc编译时加上pkg-config --cflags --libs gtk+-2.0，或者直接使用makefile编译
 例: gcc demo.c -o demo `pkg-config --cflags --libs gtk+-2.0` 自动获得预处理参数，如宏定义、头文件位置 自动获得链接参数，如库、依赖库位置、文件名及其它参数 GTK程序基本框架 #include &amp;lt;gtk/gtk.h&amp;gt; int main(int argc, char *argv[]) { gtk_init(&amp;amp;argc, &amp;amp;argv);	// 初始化  // 代码区  gtk_main();	// 主事件循环  return 0; } 分析:</description>
    </item>
    
    <item>
      <title>SQL注入</title>
      <link>https://oopsdc.tk/post/sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 07 Dec 2020 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.tk/post/sql%E6%B3%A8%E5%85%A5/</guid>
      <description>SQL注入 规则 通过发送异常数据来触发异常。
规则含义 识别Web应用上所有的数据输入，了解哪种类型的请求会触发异常，检测服务器响应中的异常。
Web应用通常包含:表示层、逻辑层、数据层。
SQL注入分类 有参数传递。
参数带入数据库查询且执行。
产生过程 Web应用开发人员无法确保在将从web表单、cookie、输入参数等收到的值传递给SQL查询之前已对其进行验证，则通常会引起SQL注入。
若攻击者能够控制发送给SQL查询的输入，且能够操纵该输入将其解析为代码而非数据，那么攻击者就有可能有能力在后台数据库上执行该代码。
若应用开发人员无法彻底理解与他们交互的基础数据库或完全无法理解并意识到所开发代码潜在的安全问题，那么他们编写的程序通常是不安全的，容易受到SQL注入攻击。
盲注 假设发现了一个SQL注入点，但应用只提供了一个通用的错误页面，或虽然提供了正常的页面，但与我们取回的内容存在一些可见或不可见的小差异，这些都属于盲注。SQL盲注是指在无法使用详细数据库错误信息或带内数据连接的情况下，利用数据库查询的输入审查漏洞从数据库提取信息或提取与数据库查询相关信息的攻击技术。
强制产生通用错误 应用中经常使用通用错误页面来替换数据库错误，即使出现通用错误页面，也可以推断SQL注入是否可行。若应用只在提交单引号或其中一个变量时才产生通用错误页面，那么很可能存在SQL盲注。提交单引号是最常见的错误源受损的SQL查询。
注入带副作用的查询 最常用的是时序攻击来确认攻击者的SQL是否已执行，有时也可利用攻击者能够观察到的输出进行判断。
拆分与平衡 分解合法输入的操作称为拆分，平衡保证最终查询中不包含不平衡的结尾单引号。
基本思想:收集合法的请求参数，之后使用SQL关键字对他们进行修改以保证与原数据不同，担当数据库解析他们时，二者的功能等价。
基于时间的盲注 所有相应都包含一种属性:发出请求到响应到达这段时间的差异。当某一状态为真时，能够让响应暂停几秒，为假时，能够不出现暂停。
基于响应的盲注 通过仔细检查响应中的数据来推断状态，推断状态时，借助响应中包含的文本或在检查特定值时强制产生的错误，产生的错误类型是运行时错误而非查询编译错误。
常用步骤 （一）发现SQL注入位置 1.整型参数判断 HTTP://xxx.xxx.xxx/xxx.asp?p=xx&#39;，此时xxx.asp中SQL语句变成了select * from 表名 where 字段=xx&#39; ，xx.asp运行异常。
HTTP://xxx.xxx.xxx/xxx.asp?p=xx and 1=1，xxx.asp运行正常，且与HTTP://xxx.xxx.xxx/xxx.asp?p=xx运行结果相同。
HTTP://xxx.xxx.xxx/xxx.asp?p=xx and 1=2，xxx.asp运行异常。
2.字符型参数判断 HTTP://xxx.xxx.xxx/xxx.asp?p=xx&#39;，此时xxx.asp中的SQL语句变成了select * from 表名 where 字段=xx&#39;，xxx.asp运行异常。
HTTP://xxx.xxx.xxx/xxx.asp?p=xx&amp;amp;nm...39;1&#39;=&#39;1&#39;，xxx.asp运行正常，且与HTTP://xxx.xxx.xxx/xxx.asp?p=xx运行结果相同。
HTTP://xxx.xxx.xxx/xxx.asp?p=xx&amp;amp;nb...39;1&#39;=&#39;2&#39;，xxx.asp运行异常。
若这三步全满足，则xxx.asp一定存在SQL注入漏洞。
特殊类型参数判断 对于字符过滤等情况，可以尝试以下方法。
大小写混合:VBS不区分大小写，程序员在设计时往往忽略大小写混合情况，可以尝试使用SelecT代替select。
UNICODE:UNICODE字符集实现国际化，+=%2B，space=%20。
ASCII:U=chr(85)，a=chr(97)。
（二）判断后台数据库类型 查询数据库名称 1&amp;#39; union select 1,database(); 查询数据库表名 1&amp;#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database(); 获取字段名 1&amp;#39; union select 1,group_concat(columns_name) from information_schema.</description>
    </item>
    
  </channel>
</rss>
